// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package ipdata is a generated GoMock package.
package ipdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDao) Get(ctx context.Context, filters *IpData) ([]IpData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filters)
	ret0, _ := ret[0].([]IpData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDaoMockRecorder) Get(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDao)(nil).Get), ctx, filters)
}

// GetByIp mocks base method.
func (m *MockDao) GetByIp(ctx context.Context, ip int64) (IpData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIp", ctx, ip)
	ret0, _ := ret[0].(IpData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIp indicates an expected call of GetByIp.
func (mr *MockDaoMockRecorder) GetByIp(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIp", reflect.TypeOf((*MockDao)(nil).GetByIp), ctx, ip)
}

// GetIpSumByCountry mocks base method.
func (m *MockDao) GetIpSumByCountry(ctx context.Context, countryName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpSumByCountry", ctx, countryName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpSumByCountry indicates an expected call of GetIpSumByCountry.
func (mr *MockDaoMockRecorder) GetIpSumByCountry(ctx, countryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpSumByCountry", reflect.TypeOf((*MockDao)(nil).GetIpSumByCountry), ctx, countryName)
}

// GetTopIspByCountryCode mocks base method.
func (m *MockDao) GetTopIspByCountryCode(ctx context.Context, countryCode string, limit int) ([]IspIpCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopIspByCountryCode", ctx, countryCode, limit)
	ret0, _ := ret[0].([]IspIpCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopIspByCountryCode indicates an expected call of GetTopIspByCountryCode.
func (mr *MockDaoMockRecorder) GetTopIspByCountryCode(ctx, countryCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopIspByCountryCode", reflect.TypeOf((*MockDao)(nil).GetTopIspByCountryCode), ctx, countryCode, limit)
}
